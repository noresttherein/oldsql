package net.noresttherein.oldsql.sql.jdbc

import java.io.{InputStream, Reader}
import java.net.URL
import java.sql.{Blob, CallableStatement, Clob, Connection, Date, NClob, ParameterMetaData, PreparedStatement, Ref, ResultSet, ResultSetMetaData, RowId, SQLType, SQLWarning, SQLXML, Statement, Time, Timestamp}
import java.{sql, util}
import java.util.Calendar

import scala.annotation.nowarn






/**
  * @author Marcin Mo≈õcicki
  */
class StatementProxy(statement :Statement) extends Statement {

	override def execute(sql :String, autoGeneratedKeys :Int) :Boolean = statement.execute(sql, autoGeneratedKeys)
	override def execute(sql :String, columnIndexes :Array[Int]) :Boolean = statement.execute(sql, columnIndexes)
	override def execute(sql :String, columnNames :Array[String]) :Boolean = statement.execute(sql, columnNames)
	override def execute(sql :String) :Boolean = statement.execute(sql)
	override def executeUpdate(sql :String, autoGeneratedKeys :Int) :Int = statement.executeUpdate(sql, autoGeneratedKeys)
	override def executeUpdate(sql :String, columnIndexes :Array[Int]) :Int = statement.executeUpdate(sql, columnIndexes)
	override def executeUpdate(sql :String, columnNames :Array[String]) :Int = statement.executeUpdate(sql, columnNames)
	override def executeUpdate(sql :String) :Int = statement.executeUpdate(sql)
	override def executeQuery(sql :String) :ResultSet = statement.executeQuery(sql)
	override def executeBatch() :Array[Int] = statement.executeBatch()
	override def executeLargeUpdate(sql :String) :Long = statement.executeLargeUpdate(sql)
	override def executeLargeUpdate(sql :String, autoGeneratedKeys :Int) :Long = statement.executeLargeUpdate(sql, autoGeneratedKeys)
	override def executeLargeUpdate(sql :String, columnIndexes :Array[Int]) :Long = statement.executeLargeUpdate(sql, columnIndexes)
	override def executeLargeUpdate(sql :String, columnNames :Array[String]) :Long = statement.executeLargeUpdate(sql, columnNames)
	override def executeLargeBatch() :Array[Long] = statement.executeLargeBatch()

	override def getResultSet :ResultSet = statement.getResultSet
	override def getUpdateCount :Int = statement.getUpdateCount
	override def getMoreResults :Boolean = statement.getMoreResults
	override def getMoreResults(current :Int) :Boolean = statement.getMoreResults(current)
	override def getGeneratedKeys :ResultSet = statement.getGeneratedKeys
	override def getLargeUpdateCount :Long = statement.getLargeUpdateCount
	override def setLargeMaxRows(max :Long) :Unit = statement.setLargeMaxRows(max)
	override def getLargeMaxRows :Long = statement.getLargeMaxRows

	override def addBatch(sql :String) :Unit = statement.addBatch(sql)
	override def clearBatch() :Unit = statement.clearBatch()

	override def setCursorName(name :String) :Unit = statement.setCursorName(name)
	override def getMaxFieldSize :Int = statement.getMaxFieldSize
	override def setMaxFieldSize(max :Int) :Unit = statement.setMaxFieldSize(max)
	override def getMaxRows :Int = statement.getMaxRows
	override def setMaxRows(max :Int) :Unit = statement.setMaxRows(max)
	override def setEscapeProcessing(enable :Boolean) :Unit = statement.setEscapeProcessing(enable)
	override def getQueryTimeout :Int = statement.getQueryTimeout
	override def setQueryTimeout(seconds :Int) :Unit = statement.setQueryTimeout(seconds)
	override def setFetchDirection(direction :Int) :Unit = statement.setFetchDirection(direction)
	override def getFetchDirection :Int = statement.getFetchDirection
	override def setFetchSize(rows :Int) :Unit = statement.setFetchSize(rows)
	override def getFetchSize :Int = statement.getFetchSize
	override def getResultSetConcurrency :Int = statement.getResultSetConcurrency
	override def getResultSetType :Int = statement.getResultSetType
	override def getResultSetHoldability :Int = statement.getResultSetHoldability
	override def setPoolable(poolable :Boolean) :Unit = statement.setPoolable(poolable)
	override def isPoolable :Boolean = statement.isPoolable

	override def getWarnings :SQLWarning = statement.getWarnings
	override def clearWarnings() :Unit = statement.clearWarnings()

	override def closeOnCompletion() :Unit = statement.closeOnCompletion()
	override def isCloseOnCompletion :Boolean = statement.isCloseOnCompletion

	override def getConnection :Connection = statement.getConnection

	override def isClosed :Boolean = statement.isClosed

	override def cancel() :Unit = statement.cancel()
	override def close() :Unit = statement.close()

	override def enquoteLiteral(`val` :String) :String = statement.enquoteLiteral(`val`)
	override def enquoteIdentifier(identifier :String, alwaysQuote :Boolean) :String = statement.enquoteIdentifier(identifier, alwaysQuote)
	override def enquoteNCharLiteral(`val` :String) :String = statement.enquoteNCharLiteral(`val`)
	override def isSimpleIdentifier(identifier :String) :Boolean = statement.isSimpleIdentifier(identifier)

	override def isWrapperFor(iface :Class[_]) :Boolean = statement.isWrapperFor(iface)
	override def unwrap[T](iface :Class[T]) :T = statement.unwrap(iface)
}






class PreparedStatementProxy(statement :PreparedStatement) extends StatementProxy(statement) with PreparedStatement {
	override def execute() :Boolean = statement.execute()
	override def executeQuery() :ResultSet = statement.executeQuery()
	override def executeUpdate() :Int = statement.executeUpdate()

	override def addBatch() :Unit = statement.addBatch()
	override def clearParameters() :Unit = statement.clearParameters()

	override def setArray(parameterIndex :Int, x :sql.Array) :Unit = statement.setArray(parameterIndex, x)
	override def setAsciiStream(parameterIndex :Int, x :InputStream, length :Int) :Unit = statement.setAsciiStream(parameterIndex, x)
	override def setAsciiStream(parameterIndex :Int, x :InputStream, length :Long) :Unit = statement.setAsciiStream(parameterIndex, x, length)
	override def setAsciiStream(parameterIndex :Int, x :InputStream) :Unit = statement.setAsciiStream(parameterIndex, x)
	override def setBigDecimal(parameterIndex :Int, x :java.math.BigDecimal) :Unit = statement.setBigDecimal(parameterIndex, x)
	override def setBinaryStream(parameterIndex :Int, x :InputStream, length :Int) :Unit = statement.setBinaryStream(parameterIndex, x, length)
	override def setBinaryStream(parameterIndex :Int, x :InputStream, length :Long) :Unit = statement.setBinaryStream(parameterIndex, x, length)
	override def setBinaryStream(parameterIndex :Int, x :InputStream) :Unit = statement.setBinaryStream(parameterIndex, x)
	override def setBoolean(parameterIndex :Int, x :Boolean) :Unit = statement.setBoolean(parameterIndex, x)
	override def setByte(parameterIndex :Int, x :Byte) :Unit = statement.setByte(parameterIndex, x)
	override def setBytes(parameterIndex :Int, x :Array[Byte]) :Unit = statement.setBytes(parameterIndex, x)
	override def setBlob(parameterIndex :Int, x :Blob) :Unit = statement.setBlob(parameterIndex, x)
	override def setBlob(parameterIndex :Int, inputStream :InputStream, length :Long) :Unit = statement.setBlob(parameterIndex, inputStream, length)
	override def setBlob(parameterIndex :Int, inputStream :InputStream) :Unit = statement.setBlob(parameterIndex, inputStream)
	override def setCharacterStream(parameterIndex :Int, reader :Reader, length :Int) :Unit = statement.setCharacterStream(parameterIndex, reader, length)
	override def setCharacterStream(parameterIndex :Int, reader :Reader, length :Long) :Unit = statement.setCharacterStream(parameterIndex, reader, length)
	override def setCharacterStream(parameterIndex :Int, reader :Reader) :Unit = statement.setCharacterStream(parameterIndex, reader)
	override def setClob(parameterIndex :Int, x :Clob) :Unit = statement.setClob(parameterIndex, x)
	override def setClob(parameterIndex :Int, reader :Reader, length :Long) :Unit = statement.setClob(parameterIndex, reader, length)
	override def setClob(parameterIndex :Int, reader :Reader) :Unit = statement.setClob(parameterIndex, reader)
	override def setDate(parameterIndex :Int, x :Date, cal :Calendar) :Unit = statement.setDate(parameterIndex, x)
	override def setDate(parameterIndex :Int, x :Date) :Unit = statement.setDate(parameterIndex, x)
	override def setDouble(parameterIndex :Int, x :Double) :Unit = statement.setDouble(parameterIndex, x)
	override def setFloat(parameterIndex :Int, x :Float) :Unit = statement.setFloat(parameterIndex, x)
	override def setInt(parameterIndex :Int, x :Int) :Unit = statement.setInt(parameterIndex, x)
	override def setLong(parameterIndex :Int, x :Long) :Unit = statement.setLong(parameterIndex, x)
	override def setNCharacterStream(parameterIndex :Int, value :Reader, length :Long) :Unit = statement.setNCharacterStream(parameterIndex, value, length)
	override def setNCharacterStream(parameterIndex :Int, value :Reader) :Unit = statement.setNCharacterStream(parameterIndex, value)
	override def setNClob(parameterIndex :Int, value :NClob) :Unit = statement.setNClob(parameterIndex, value)
	override def setNClob(parameterIndex :Int, reader :Reader, length :Long) :Unit = statement.setNClob(parameterIndex, reader, length)
	override def setNClob(parameterIndex :Int, reader :Reader) :Unit = statement.setNClob(parameterIndex, reader)
	override def setNString(parameterIndex :Int, value :String) :Unit = statement.setNString(parameterIndex, value)
	override def setNull(parameterIndex :Int, sqlType :Int, typeName :String) :Unit = statement.setNull(parameterIndex, sqlType, typeName)
	override def setNull(parameterIndex :Int, sqlType :Int) :Unit = statement.setNull(parameterIndex, sqlType)
	override def setObject(parameterIndex :Int, x :Any, targetSqlType :Int) :Unit = statement.setObject(parameterIndex, x, targetSqlType)
	override def setObject(parameterIndex :Int, x :Any) :Unit = statement.setObject(parameterIndex, x)
	override def setObject(parameterIndex :Int, x :Any, targetSqlType :Int, scaleOrLength :Int) :Unit = statement.setObject(parameterIndex, x, targetSqlType, scaleOrLength)
	override def setRef(parameterIndex :Int, x :Ref) :Unit = statement.setRef(parameterIndex, x)
	override def setRowId(parameterIndex :Int, x :RowId) :Unit = statement.setRowId(parameterIndex, x)
	override def setShort(parameterIndex :Int, x :Short) :Unit = statement.setShort(parameterIndex, x)
	override def setString(parameterIndex :Int, x :String) :Unit = statement.setString(parameterIndex, x)
	override def setSQLXML(parameterIndex :Int, xmlObject :SQLXML) :Unit = statement.setSQLXML(parameterIndex, xmlObject)
	override def setTime(parameterIndex :Int, x :Time) :Unit = statement.setTime(parameterIndex, x)
	override def setTimestamp(parameterIndex :Int, x :Timestamp) :Unit = statement.setTimestamp(parameterIndex, x)
	override def setTime(parameterIndex :Int, x :Time, cal :Calendar) :Unit = statement.setTime(parameterIndex, x, cal)
	override def setTimestamp(parameterIndex :Int, x :Timestamp, cal :Calendar) :Unit = statement.setTimestamp(parameterIndex, x, cal)
	override def setURL(parameterIndex :Int, x :URL) :Unit = statement.setURL(parameterIndex, x)
	@nowarn
	override def setUnicodeStream(parameterIndex :Int, x :InputStream, length :Int) :Unit = statement.setUnicodeStream(parameterIndex, x, length)


	override def getMetaData :ResultSetMetaData = statement.getMetaData
	override def getParameterMetaData :ParameterMetaData = statement.getParameterMetaData
}






class CallableStatementProxy(statement :CallableStatement)
	extends PreparedStatementProxy(statement) with CallableStatement
{
	override def registerOutParameter(parameterIndex :Int, sqlType :Int) :Unit = statement.registerOutParameter(parameterIndex, sqlType)
	override def registerOutParameter(parameterIndex :Int, sqlType :Int, scale :Int) :Unit = statement.registerOutParameter(parameterIndex, sqlType, scale)
	override def registerOutParameter(parameterIndex :Int, sqlType :Int, typeName :String) :Unit = statement.registerOutParameter(parameterIndex, sqlType, typeName)
	override def registerOutParameter(parameterName :String, sqlType :Int) :Unit = statement.registerOutParameter(parameterName, sqlType)
	override def registerOutParameter(parameterName :String, sqlType :Int, scale :Int) :Unit = statement.registerOutParameter(parameterName, sqlType, scale)
	override def registerOutParameter(parameterName :String, sqlType :Int, typeName :String) :Unit = statement.registerOutParameter(parameterName, sqlType, typeName)
	override def registerOutParameter(parameterIndex :Int, sqlType :SQLType) :Unit = statement.registerOutParameter(parameterIndex, sqlType)
	override def registerOutParameter(parameterIndex :Int, sqlType :SQLType, scale :Int) :Unit = statement.registerOutParameter(parameterIndex, sqlType, scale)
	override def registerOutParameter(parameterIndex :Int, sqlType :SQLType, typeName :String) :Unit = statement.registerOutParameter(parameterIndex, sqlType, typeName)
	override def registerOutParameter(parameterName :String, sqlType :SQLType) :Unit = statement.registerOutParameter(parameterName, sqlType)
	override def registerOutParameter(parameterName :String, sqlType :SQLType, scale :Int) :Unit = statement.registerOutParameter(parameterName, sqlType, scale)
	override def registerOutParameter(parameterName :String, sqlType :SQLType, typeName :String) :Unit = statement.registerOutParameter(parameterName, sqlType, typeName)

	override def wasNull() :Boolean = statement.wasNull()

	override def getArray(parameterName :String) :sql.Array = statement.getArray(parameterName)
	override def getArray(parameterIndex :Int) :sql.Array = statement.getArray(parameterIndex)
	@nowarn
	override def getBigDecimal(parameterIndex :Int, scale :Int) :java.math.BigDecimal = statement.getBigDecimal(parameterIndex, scale)
	override def getBigDecimal(parameterIndex :Int) :java.math.BigDecimal = statement.getBigDecimal(parameterIndex)
	override def getBigDecimal(parameterName :String) :java.math.BigDecimal = statement.getBigDecimal(parameterName)
	override def getBoolean(parameterIndex :Int) :Boolean = statement.getBoolean(parameterIndex)
	override def getBoolean(parameterName :String) :Boolean = statement.getBoolean(parameterName)
	override def getByte(parameterIndex :Int) :Byte = statement.getByte(parameterIndex)
	override def getByte(parameterName :String) :Byte = statement.getByte(parameterName)
	override def getBytes(parameterIndex :Int) :Array[Byte] = statement.getBytes(parameterIndex)
	override def getBytes(parameterName :String) :Array[Byte] = statement.getBytes(parameterName)
	override def getBlob(parameterIndex :Int) :Blob = statement.getBlob(parameterIndex)
	override def getBlob(parameterName :String) :Blob = statement.getBlob(parameterName)
	override def getCharacterStream(parameterIndex :Int) :Reader = statement.getCharacterStream(parameterIndex)
	override def getCharacterStream(parameterName :String) :Reader = statement.getCharacterStream(parameterName)
	override def getClob(parameterIndex :Int) :Clob = statement.getClob(parameterIndex)
	override def getClob(parameterName :String) :Clob = statement.getClob(parameterName)
	override def getDate(parameterIndex :Int, cal :Calendar) :Date = statement.getDate(parameterIndex, cal)
	override def getDate(parameterIndex :Int) :Date = statement.getDate(parameterIndex)
	override def getDate(parameterName :String, cal :Calendar) :Date = statement.getDate(parameterName, cal)
	override def getDate(parameterName :String) :Date = statement.getDate(parameterName)
	override def getDouble(parameterIndex :Int) :Double = statement.getDouble(parameterIndex)
	override def getDouble(parameterName :String) :Double = statement.getDouble(parameterName)
	override def getFloat(parameterIndex :Int) :Float = statement.getFloat(parameterIndex)
	override def getFloat(parameterName :String) :Float = statement.getFloat(parameterName)
	override def getInt(parameterIndex :Int) :Int = statement.getInt(parameterIndex)
	override def getInt(parameterName :String) :Int = statement.getInt(parameterName)
	override def getLong(parameterIndex :Int) :Long = statement.getLong(parameterIndex)
	override def getLong(parameterName :String) :Long = statement.getLong(parameterName)
	override def getNClob(parameterIndex :Int) :NClob = statement.getNClob(parameterIndex)
	override def getNClob(parameterName :String) :NClob = statement.getNClob(parameterName)
	override def getNCharacterStream(parameterIndex :Int) :Reader = statement.getNCharacterStream(parameterIndex)
	override def getNCharacterStream(parameterName :String) :Reader = statement.getNCharacterStream(parameterName)
	override def getNString(parameterIndex :Int) :String = statement.getNString(parameterIndex)
	override def getNString(parameterName :String) :String = statement.getNString(parameterName)
	override def getObject(parameterName :String) :AnyRef = statement.getObject(parameterName)
	override def getObject(parameterName :String, map :util.Map[String, Class[_]]) :AnyRef = statement.getObject(parameterName, map)
	override def getObject(parameterIndex :Int) :AnyRef = statement.getObject(parameterIndex)
	override def getObject(parameterIndex :Int, map :util.Map[String, Class[_]]) :AnyRef = statement.getObject(parameterIndex, map)
	override def getObject[T](parameterIndex :Int, `type` :Class[T]) :T = statement.getObject(parameterIndex, `type`)
	override def getObject[T](parameterName :String, `type` :Class[T]) :T = statement.getObject(parameterName, `type`)
	override def getRef(parameterName :String) :Ref = statement.getRef(parameterName)
	override def getRef(parameterIndex :Int) :Ref = statement.getRef(parameterIndex)
	override def getRowId(parameterIndex :Int) :RowId = statement.getRowId(parameterIndex)
	override def getRowId(parameterName :String) :RowId = statement.getRowId(parameterName)
	override def getShort(parameterIndex :Int) :Short = statement.getShort(parameterIndex)
	override def getShort(parameterName :String) :Short = statement.getShort(parameterName)
	override def getString(parameterIndex :Int) :String = statement.getString(parameterIndex)
	override def getString(parameterName :String) :String = statement.getString(parameterName)
	override def getSQLXML(parameterIndex :Int) :SQLXML = statement.getSQLXML(parameterIndex)
	override def getSQLXML(parameterName :String) :SQLXML = statement.getSQLXML(parameterName)
	override def getTime(parameterIndex :Int) :Time = statement.getTime(parameterIndex)
	override def getTime(parameterName :String, cal :Calendar) :Time = statement.getTime(parameterName, cal)
	override def getTime(parameterName :String) :Time = statement.getTime(parameterName)
	override def getTime(parameterIndex :Int, cal :Calendar) :Time = statement.getTime(parameterIndex, cal)
	override def getTimestamp(parameterName :String, cal :Calendar) :Timestamp = statement.getTimestamp(parameterName, cal)
	override def getTimestamp(parameterName :String) :Timestamp = statement.getTimestamp(parameterName)
	override def getTimestamp(parameterIndex :Int) :Timestamp = statement.getTimestamp(parameterIndex)
	override def getTimestamp(parameterIndex :Int, cal :Calendar) :Timestamp = statement.getTimestamp(parameterIndex, cal)
	override def getURL(parameterIndex :Int) :URL = statement.getURL(parameterIndex)
	override def getURL(parameterName :String) :URL = statement.getURL(parameterName)


	override def setAsciiStream(parameterName :String, x :InputStream, length :Long) :Unit = statement.setAsciiStream(parameterName, x, length)
	override def setAsciiStream(parameterName :String, x :InputStream) :Unit = statement.setAsciiStream(parameterName, x)
	override def setAsciiStream(parameterName :String, x :InputStream, length :Int) :Unit = statement.setAsciiStream(parameterName, x, length)
	override def setBigDecimal(parameterName :String, x :java.math.BigDecimal) :Unit = statement.setBigDecimal(parameterName, x)
	override def setBinaryStream(parameterName :String, x :InputStream, length :Long) :Unit = statement.setBinaryStream(parameterName, x, length)
	override def setBinaryStream(parameterName :String, x :InputStream) :Unit = statement.setBinaryStream(parameterName, x)
	override def setBinaryStream(parameterName :String, x :InputStream, length :Int) :Unit = statement.setBinaryStream(parameterName, x, length)
	override def setBlob(parameterName :String, inputStream :InputStream, length :Long) :Unit = statement.setBlob(parameterName, inputStream, length)
	override def setBlob(parameterName :String, x :Blob) :Unit = statement.setBlob(parameterName, x)
	override def setBlob(parameterName :String, inputStream :InputStream) :Unit = statement.setBlob(parameterName, inputStream)
	override def setBoolean(parameterName :String, x :Boolean) :Unit = statement.setBoolean(parameterName, x)
	override def setByte(parameterName :String, x :Byte) :Unit = statement.setByte(parameterName, x)
	override def setBytes(parameterName :String, x :Array[Byte]) :Unit = statement.setBytes(parameterName, x)
	override def setCharacterStream(parameterName :String, reader :Reader, length :Long) :Unit = statement.setCharacterStream(parameterName, reader, length)
	override def setCharacterStream(parameterName :String, reader :Reader) :Unit = statement.setCharacterStream(parameterName, reader)
	override def setCharacterStream(parameterName :String, reader :Reader, length :Int) :Unit = statement.setCharacterStream(parameterName, reader, length)
	override def setClob(parameterName :String, reader :Reader, length :Long) :Unit = statement.setClob(parameterName, reader, length)
	override def setClob(parameterName :String, x :Clob) :Unit = statement.setClob(parameterName, x)
	override def setClob(parameterName :String, reader :Reader) :Unit = statement.setClob(parameterName, reader)
	override def setDate(parameterName :String, x :Date) :Unit = statement.setDate(parameterName, x)
	override def setDate(parameterName :String, x :Date, cal :Calendar) :Unit = statement.setDate(parameterName, x, cal)
	override def setDouble(parameterName :String, x :Double) :Unit = statement.setDouble(parameterName, x)
	override def setFloat(parameterName :String, x :Float) :Unit = statement.setFloat(parameterName, x)
	override def setInt(parameterName :String, x :Int) :Unit = statement.setInt(parameterName, x)
	override def setLong(parameterName :String, x :Long) :Unit = statement.setLong(parameterName, x)
	override def setNString(parameterName :String, value :String) :Unit = statement.setNString(parameterName, value)
	override def setNCharacterStream(parameterName :String, value :Reader, length :Long) :Unit = statement.setNCharacterStream(parameterName, value, length)
	override def setNCharacterStream(parameterName :String, value :Reader) :Unit = statement.setNCharacterStream(parameterName, value)
	override def setNClob(parameterName :String, reader :Reader) :Unit = statement.setNClob(parameterName, reader)
	override def setNClob(parameterName :String, value :NClob) :Unit = statement.setNClob(parameterName, value)
	override def setNClob(parameterName :String, reader :Reader, length :Long) :Unit = statement.setNClob(parameterName, reader, length)
	override def setNull(parameterName :String, sqlType :Int) :Unit = statement.setNull(parameterName, sqlType)
	override def setNull(parameterName :String, sqlType :Int, typeName :String) :Unit = statement.setNull(parameterName, sqlType, typeName)
	override def setObject(parameterName :String, x :Any, targetSqlType :Int, scale :Int) :Unit = statement.setObject(parameterName, x, targetSqlType, scale)
	override def setObject(parameterName :String, x :Any, targetSqlType :Int) :Unit = statement.setObject(parameterName, x, targetSqlType)
	override def setObject(parameterName :String, x :Any) :Unit = statement.setObject(parameterName, x)
	override def setObject(parameterName :String, x :Any, targetSqlType :SQLType, scaleOrLength :Int) :Unit = statement.setObject(parameterName, x, targetSqlType, scaleOrLength)
	override def setObject(parameterName :String, x :Any, targetSqlType :SQLType) :Unit = statement.setObject(parameterName, x, targetSqlType)
	override def setRowId(parameterName :String, x :RowId) :Unit = statement.setRowId(parameterName, x)
	override def setShort(parameterName :String, x :Short) :Unit = statement.setShort(parameterName, x)
	override def setSQLXML(parameterName :String, xmlObject :SQLXML) :Unit = statement.setSQLXML(parameterName, xmlObject)
	override def setString(parameterName :String, x :String) :Unit = statement.setString(parameterName, x)
	override def setTime(parameterName :String, x :Time) :Unit = statement.setTime(parameterName, x)
	override def setTime(parameterName :String, x :Time, cal :Calendar) :Unit = statement.setTime(parameterName, x, cal)
	override def setTimestamp(parameterName :String, x :Timestamp) :Unit = statement.setTimestamp(parameterName, x)
	override def setTimestamp(parameterName :String, x :Timestamp, cal :Calendar) :Unit = statement.setTimestamp(parameterName, x, cal)
	override def setURL(parameterName :String, `val` :URL) :Unit = statement.setURL(parameterName, `val`)


}


